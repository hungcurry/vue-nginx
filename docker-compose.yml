# region 環境語法
# -----------------------------------
# ~使用 docker-compose 啟動所有環境
# docker-compose up -d
# docker-compose up --build -d

# ~查看運行中的服務
# docker-compose ps
# docker-compose logs -f prod

#~ 停止所有容器/ 刪除所有映像/ 刪除所有卷
# docker-compose down --rmi all --volumes

# -----------------------------------
# 🔥沒有 使用 Docker 環境變數時
# 直接使用 /etc/nginx/conf.d/default.conf 作為 Nginx 配置檔案。
# 這是 Nginx 直接讀取並運行的設定檔，不用額外處理。

# 🔥有  使用 Docker 環境變數時
# 使用 /etc/nginx/templates/default.conf.template 作為 模板檔案。
# Docker 進入點腳本 會將環境變數填入這個模板，
# 然後產生 /etc/nginx/conf.d/default.conf

# 🔥查看容器目錄內容
# ls -1 指令
# ls -l /etc/nginx/conf.d

# 🔥讀取檔案
# cat 指令
# cat /usr/share/nginx/html/dev

# 🔥各環境靜態文件的目錄
# docker exec -it vue-dev sh
# ls -l /usr/share/nginx/html
# ls -l /usr/share/nginx/html/dev
# cat /usr/share/nginx/html/dev/index.html

# 🔥進入容器 vue-dev
# docker exec -it vue-dev sh
# ls -l /etc/nginx
# cat /etc/nginx/templates/default.conf.template
# cat /etc/nginx/conf.d/default.conf

# 🔥進入容器 nginx-proxy
# docker exec -it nginx-proxy sh
# ls -l /etc/nginx
# cat /etc/nginx/conf.d/default.conf

# 外部
# nginx:
# ports: - '8080:90'
# // 8080 是外部連結 90 是內部容器
# 所以網址是 http://localhost:8080/
# 90 對應到 nginx 的容器 listen 90;

# 內部(容器)
# server {
#   listen 90;
#   server_name localhost;
# }

# 我本地 3 個環境 dockerfile 產生的網址
# http://localhost:4040/dev/
# http://localhost:4041/test/
# http://localhost:4042/prod/

# 都把前面網址轉成 http://localhost:8080
# 同一個網址取代
# http://localhost:8080/dev/
# http://localhost:8080/test/
# http://localhost:8080/prod/
#endregion

version: '3.8'
# 在文件開頭定義網絡
networks:
  app-network:
    driver: bridge

volumes:
  vue-dev-source:
  vue-test-source:
  vue-prod-source:

services:
  dev:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    ports:
      - '4040:80'
    container_name: vue-dev
    image: vue-docker-dev
    restart: unless-stopped
    volumes:
      - vue-dev-source:/app
      - /app/node_modules
    networks:
      - app-network

  test:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    ports:
      - '4041:80' # 使用不同的端口
    container_name: vue-test
    image: vue-docker-test
    restart: unless-stopped
    volumes:
      - vue-test-source:/app
      - /app/node_modules
    networks:
      - app-network

  prod:
    build:
      context: .
      dockerfile: docker/Dockerfile.prod
    ports:
      - '4042:80' # 使用不同的端口
    container_name: vue-prod
    image: vue-docker-prod
    restart: unless-stopped
    volumes:
      - vue-prod-source:/app
      - /app/node_modules
    networks:
      - app-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '8080:90'
    container_name: nginx-proxy
    depends_on:
      - dev
      - test
      - prod
    volumes:
      - ./nginx/nginx-share.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app-network
    restart: unless-stopped
